{
  ".README": {
    "fields": {
      "rq": "rq query to be substituted into \"jq '.[] | select($rq) | .filename\" corpus.json'\", e.g. \"jq '.[] | select(.json.prefixes) | .filename' corpus.json\"",
      "expect": "at least these files should match the rq quere"
    }
  },
  "base": { "rq": ".json.base", "expect": [
    "1dot-base", "kitchenSink" ] },
  "prefix": { "rq": ".json.prefixes", "expect": [
    "1dotLNdefault", "1dotLNex-HYPHEN_MINUS", "1dotLNex", "1dotLNexComment", "1dotNS2", "1dotNS2Comment", "1dotNSdefault", "1dotRefLNex1", "1dotRefNS1", "1dotRefSpaceLNex1", "1dotRefSpaceNS1", "1val1LNDatatype", "3groupdotExtra3NLex", "_all", "kitchenSink" ] },
  "empty shape": { "rq": "..|select((.type==\"Shape\") and (.expression | not))?", "expect": [
    "0"] },
  "NC AND Shape": { "rq": "..|select(.type==\"ShapeAnd\"? and (.shapeExprs[].type==\"NodeConstraint\") and (.shapeExprs[].type==\"Shape\"))", "expect": [
    "1focusBNODELength_dot", "1focusBNODE_dot", "1focusIRILength_dot", "1focusIRI_dot", "1focusLength-dot", "1focusMaxLength-dot", "1focusMinLength-dot", "1focusPattern-dot", "1focusPatternB-dot", "1focusnonLiteral-dot", "1focusnonLiteralLength-dot", "1focusnonLiteralLength-nonLiteralLength", "FocusIRI2groupBnodeNested2groupIRIRef", "FocusIRI2groupBnodeNested2groupIRIRef", "FocusIRI2groupBnodeNested2groupIRIRef" ]}
}
