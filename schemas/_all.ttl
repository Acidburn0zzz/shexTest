@prefix ex: <http://a.example> .
@prefix sx: <http://shex.io/ns/shex#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
PREFIX prefix1: <http://all.example/>

<http://all.example/Schema0> a sx:Schema ;
  sx:start [ a sx:ShapeRef ; sx:reference <http://all.example/S3> ] ;
  sx:shapes
    <http://all.example/IRI>,
    <http://all.example/S1>,
    <http://all.example/S2>,
    <http://all.example/S3>,
    <http://all.example/S5>,
    <http://all.example/vs1>,
    _:bnodeShape1,
    [ a sx:Shape ; sx:expression [ a sx:Inclusion ; sx:include _:bnodeShape1 ] ] .

<http://all.example/IRI> a sx:NodeConstraint ; sx:nodeKind "iri" .

<http://all.example/S1> a sx:Shape ;
  sx:extra <http://all.example/p1>, <http://all.example/p2>, <http://all.example/p3> ;
  sx:expression [ a sx:EachOf ;
    sx:expressions (
      [ a sx:TripleConstraint ; sx:predicate <http://all.example/p1> ]
      [ a sx:TripleConstraint ; sx:predicate <http://all.example/p2> ]
      [ a sx:TripleConstraint ; sx:predicate <http://all.example/p3> ] ) ] .

<http://all.example/S2> a sx:Shape ;
  sx:extra <http://all.example/p1>, <http://all.example/p2>, <http://all.example/p3> ;
  sx:expression [ a sx:EachOf ;
    sx:expressions (
      [ a sx:TripleConstraint ; sx:predicate <http://all.example/p1-> ]
      [ a sx:TripleConstraint ; sx:predicate <http://all.example/p2> ]
      [ a sx:TripleConstraint ; sx:predicate <http://all.example/p3> ] ) ] .

<http://all.example/S3> a sx:Shape ;
  sx:extra <http://all.example/a>, <http://all.example/base>, <http://all.example/prefix> ;
  sx:expression [ a sx:EachOf ;
    sx:expressions (
      [ a sx:Inclusion ; sx:include <http://all.example/S1> ]
      [ a sx:TripleConstraint ; sx:predicate <http://all.example/a> ]
      [ a sx:TripleConstraint ; sx:max 1 ; sx:min "0"^^xsd:nonNegativeInteger ; sx:predicate <http://all.example/prefix> ;
        sx:valueExpr [ a sx:NodeConstraint ;
          sx:datatype <http://all.example/dt> ;
          sx:length "2"^^xsd:nonNegativeInteger ] ]
      [ a sx:OneOf ; sx:expressions (
        [ a sx:TripleConstraint ; sx:predicate <http://all.example/999> ]
         [ a sx:EachOf ; sx:expressions (
          [ a sx:TripleConstraint ; sx:max "*" ; sx:min "0"^^xsd:nonNegativeInteger ; sx:predicate <http://all.example/base> ;
            sx:valueExpr [ a sx:NodeConstraint ; sx:nodeKind "iri" ] ]
          [ a sx:TripleConstraint ; sx:max "*" ; sx:min "1"^^xsd:nonNegativeInteger ; sx:predicate <http://all.example/PREFIX> ;
            sx:valueExpr [ a sx:NodeConstraint ;
              sx:length "5"^^xsd:nonNegativeInteger ;
              sx:nodeKind "iri" ;
              sx:pattern "^http://" ] ]
          [ a sx:TripleConstraint ; sx:max 2 ; sx:min "2"^^xsd:nonNegativeInteger ; sx:predicate <http://all.example/BaSe> ;
            sx:valueExpr [ a sx:ShapeRef ; sx:reference <http://all.example/S5> ] ] ) ]
        [ a sx:TripleConstraint ; sx:max "*" ; sx:min "2"^^xsd:nonNegativeInteger ; sx:predicate <http://all.example/virtual> ;
          sx:valueExpr [ a sx:ShapeAnd ; sx:shapeExprs (
            [ a sx:NodeConstraint ; sx:nodeKind "nonliteral" ]
            [ a sx:ShapeRef ; sx:reference <http://all.example/S5> ] ) ] ]
        [ a sx:TripleConstraint ; sx:max "*" ; sx:min "2"^^xsd:nonNegativeInteger ; sx:predicate <http://all.example/closed> ;
          sx:valueExpr [ a sx:ShapeOr ; sx:shapeExprs (
            [ a sx:ShapeAnd ; sx:shapeExprs (
              [ a sx:NodeConstraint ; sx:nodeKind "bnode" ]
              [ a sx:ShapeRef ; sx:reference <http://all.example/S5> ] ) ]
            [ a sx:ShapeAnd ; sx:shapeExprs (
              [ a sx:NodeConstraint ; sx:maxlength "4"^^xsd:nonNegativeInteger ; sx:minlength "2"^^xsd:nonNegativeInteger ]
              [ a sx:ShapeRef ; sx:reference <http://all.example/S5> ] ) ] ) ] ]

        [ a sx:EachOf ; sx:expressions (
          [ a sx:OneOf ; sx:expressions (
            [ a sx:EachOf ; sx:expressions (
              [ a sx:TripleConstraint ; sx:inverse true ; sx:max 3 ; sx:min "2"^^xsd:nonNegativeInteger ; sx:predicate <http://all.example/extra> ;
                sx:valueExpr [ a sx:Shape ; sx:expression [ a sx:TripleConstraint ;
                  sx:predicate <http://all.example/p1> ;
                  sx:valueExpr [ a sx:NodeConstraint ; sx:values (
                    "STRING_LITERAL2" "STRING_LITERAL2"@en-UK <http://all.example/> prefix1:val1#comment
	            prefix1:#comment
	            <scheme:!$%25&amp;'()*+,-./0123456789:/@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~?#>
	            <http://a.example/p\u0031>
	            0.0 0e0 0E0 false 0 "ab"^^<http://all.example/bloodType> "o+"^^prefix1:bloodType
	            ' !"#$%&():;<=>?@[]^_`{|}~' # "
	            "\"\\"
	            """STRING_LITERAL_LONG2"""@en-UK
                                                                    ) ] ] ] ]
              [ a sx:TripleConstraint ;
                sx:annotation
                  [ a sx:Annotation ; sx:predicate <http://a.example/annot1> ; sx:object <http://a.example/IRIREF> ],
                  [ a sx:Annotation ; sx:object "STRING_LITERAL2" ; sx:predicate <http://a.example/annot2> ],
                  [ a sx:Annotation ; sx:object 3 ; sx:predicate <http://a.example/annot3> ] ;
                sx:max "*" ; sx:min "1"^^xsd:nonNegativeInteger ; sx:predicate <http://all.example/iri> ;
                sx:valueExpr [ a sx:NodeConstraint ; sx:nodeKind "literal" ] ]
            ) ]
            [ a sx:EachOf ; sx:expressions (
              [ a sx:TripleConstraint ; sx:inverse true ; sx:max "*" ; sx:min "1"^^xsd:nonNegativeInteger ; sx:predicate <http://all.example/bnode> ]
              [ a sx:TripleConstraint ; sx:inverse true ; sx:max "*" ; sx:min "1"^^xsd:nonNegativeInteger ; sx:predicate <http://all.example/literal> ] ) ]
          ) ]
          [ a sx:TripleConstraint ; sx:predicate <http://all.example/nonliteral> ;
            sx:valueExpr [ a sx:NodeConstraint ; sx:datatype xsd:integer ; sx:maxinclusive 5 ; sx:mininclusive 5 ; sx:totaldigits "1"^^xsd:nonNegativeInteger ] ]
        ) ]
      ) ]

      [ a sx:TripleConstraint ; sx:predicate <http://all.example/or> ;
        sx:valueExpr [ a sx:ShapeRef ; sx:reference <http://all.example/vs1> ] ]
      [ a sx:TripleConstraint ; sx:predicate <http://all.example/pattern> ;
        sx:valueExpr [ a sx:NodeConstraint ; sx:values (
          [ a sx:StemRange ; sx:stem [ a sx:Wildcard ] ; sx:exclusion
              [ a sx:Stem ; sx:stem "http://all.example/a"^^xsd:anyUri ],
              <http://all.example/b> ] ) ] ]
    ) ] .

<http://all.example/S5> a sx:NodeConstraint ; sx:nodeKind "iri" .

<http://all.example/vs1> a sx:ShapeAnd ;
  sx:shapeExprs (
    [ a sx:NodeConstraint ; sx:values (
      <http://a.example/a1>
      [ a sx:StemRange ; sx:stem "http://all.example/"^^xsd:anyUri ; sx:exclusion
        [ a sx:Stem ; sx:stem "http://all.example/a"^^xsd:anyUri ],
        <http://all.example/b> ] ) ]
    [ a sx:NodeConstraint ; sx:datatype <http://all.example/IRI> ] ) .

_:bnodeShape1 a sx:Shape ; sx:closed true ;
  sx:expression [ a sx:EachOf ;
    sx:expressions (
      [ a sx:Inclusion ; sx:include _:bnodeShape1 ]
      [ a sx:Inclusion ; sx:include <http://all.example/S2> ] )] .

