-# This template is used for generating a rollup EARL report. It expects to be
-# called with a single _tests_ local with the following structure
-#
-#  {
-#    "@context": {...},
-#    "@id": "",
-#    "@type": "earl:Software",
-#    "name": "...",
-#    "bibRef": "[[...]]",
-#    "assertions": ["./rdf.rb-earl.ttl"],
-#    "testSubjects": [
-#      {
-#        "@id": "http://rubygems.org/gems/rdf-turtle",
-#        "@type": "earl:TestSubject",
-#        "name": "RDF::Turtle"
-#      },
-#      ...
-#    ],
-#    "tests": [{
-#      "@id": "http://www.w3.org/2013/TurtleTests/manifest.ttl#turtle-syntax-file-01",
-#      "@type": ["earl:TestCriterion", "earl:TestCase"],
-#      "title": "subm-test-00",
-#      "description": "Blank subject",
-#      "testAction": "http://www.w3.org/2013/TurtleTests/turtle-syntax-file-01.ttl",
-#      "testResult": "http://www.w3.org/2013/TurtleTests/turtle-syntax-file-01.out"
-#      "mode": "earl:automatic",
-#      "assertions": [
-#        {
-#          "@type": "earl:Assertion",
-#          "assertedBy": "http://greggkellogg.net/foaf#me",
-#          "test": "http://svn.apache.org/repos/asf/jena/Experimental/riot-reader/testing/RIOT/Lang/TurtleSubm/manifest.ttl#testeval00",
-#          "subject": "http://rubygems.org/gems/rdf-turtle",
-#          "result": {
-#            "@type": "earl:TestResult",
-#            "outcome": "earl:passed"
-#          }
-#        }
-#      ]
-#    }]
-#  }
- require 'cgi'

!!! 5
%html{prefix: "earl: http://www.w3.org/ns/earl# doap: http://usefulinc.com/ns/doap# mf: http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#"}
  - subjects = tests['testSubjects']
  %head
    %meta{"http-equiv" => "Content-Type", content: "text/html;charset=utf-8"}
    %link{rel: "alternate", href: "earl.ttl"}
    %link{rel: "alternate", href: "earl.jsonld"}
    %link{rel: "stylesheet", href: "https://www.w3.org/StyleSheets/TR/base"}
    - tests['assertions'].each do |file|
      %link{rel: "related", href: file}
    %title
      = tests['name']
      Implementation Report
    :css
      span[property='dc:description'] { display: none; }
      td.PASS { color: green; }
      td.FAIL { color: red; }
      table.report {
        border-width: 1px;
        border-spacing: 2px;
        border-style: outset;
        border-color: gray;
        border-collapse: separate;
        background-color: white;
      }
      table.report th {
        border-width: 1px;
        padding: 1px;
        border-style: inset;
        border-color: gray;
        background-color: white;
        -moz-border-radius: ;
      }
      table.report td {
        border-width: 1px;
        padding: 1px;
        border-style: inset;
        border-color: gray;
        background-color: white;
        -moz-border-radius: ;
      }
      tr.summary {font-weight: bold;}
      td.passed-all {color: green;}
      td.passed-most {color: darkorange;}
      td.passed-some {color: red;}
      td.passed-none {color: gray;}
      em.rfc2119 { 
        text-transform: lowercase;
        font-variant:   small-caps;
        font-style:     normal;
        color:          #900;
      }
      a.testlink {
        color: inherit;
        text-decoration: none;
      }
      a.testlink:hover {
        text-decoration: underline;
      }
      pre > code {
        color: #C83500;
      }
  %body{prefix: "earl: http://www.w3.org/ns/earl# doap: http://usefulinc.com/ns/doap# mf: http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#"}
    - test_info = {}
    - test_refs = {}
    - subject_refs = {}
    - tests['entries'].each {|m| m['title'] ||= m['rdfs:label'] || m['description']}
    - subjects.each_with_index do |subject, index|
      - subject_refs[subject['@id']] = "subj_#{index}"
    %div.head{role: :contentinfo}
      %p
        %a{href: "http://www.w3.org/"}
          %img{width: 72, height: 48, src: "https://www.w3.org/Icons/w3c_home", alt: "W3C"}
      %h1.title.p-name#title{property: "dc:title"}=tests['name']
      %h2#w3c-document-28-october-2015
        %abbr{title: "World Wide Web Consortium"}="W3C"
        Document
        %time.dt-published{property: "dc:issued", datetime: Time.now.strftime('%Y-%m-%d')}
          = Time.now.strftime("%d %B %Y")
      %dl
        %dt="Editor:"
        %dd.p-author.h-card.vcard{property: "bibo:editor", resource: "_:editor0"}
          %span{property: "rdf:first", typeof: "foaf:Person"}
            %meta{property: "foaf:name", content: "Gregg Kellogg"}
            %a.url.fn.u-url.p-name{property: "foaf:homepage", href: "http://greggkellogg.net/"}
              Gregg Kellogg
          %meta{property: "rdf:rest", resource: "rdf:nil"}
      %p
        This document is also available in these non-normative formats:
        %a{re: "alternate", href: "earl.ttl"}
        and
        %a{re: "alternate", href: "earl.jsonld"}
        = "."
      %p.copyright
        %a{href: "http://www.w3.org/Consortium/Legal/ipr-notice#Copyright"}
          Copyright
        © 2010-2015
        %a{href: "http://www.w3.org/"}
          %sup="®"
        (
        %a{href: "http://www.csail.mit.edu/"}<>
          %abbr{title: "Massachusetts Institute of Technology"}<>="MIT"
        = ", "
        %a{href: "http://www.ercim.eu/"}<>
          %abbr{title: "European Research Consortium for Informatics and Mathematics"}<>="ERCIM"
        = ", "
        %a{href: "http://www.keio.ac.jp/"}<>="Keio"
        = ", "
        %a{href: "http://ev.buaa.edu.cn/"}<>="Beihang"
        ).
        %abbr{title: "World Wide Web Consortium"}="W3C"
        %a{href: "http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer"}="liability"
        = ","
        %a{href: "http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks"}="trademark"
        and
        %a{rel: "license", href: "http://www.w3.org/Consortium/Legal/copyright-documents"}="document use"
        rules apply.
      %hr
    %section#abstract{about: tests['@id'], typeof: [tests['@type']].flatten.join(" ")}
      %h2="Abstract"
      %p
        This document report test subject conformance for and related specifications for
        %a{property: "doap:name", href: "https://shexspec.github.io/spec/"}<=tests['name']
        %span{property: "dc:bibliographicCitation"}<
          = tests['bibRef']
        according to the requirements of the Evaluation and Report Language (EARL) 1.0 Schema [EARL10-SCHEMA](https://www.w3.org/TR/EARL10-Schema/).
      %p
        This report is also available in alternate formats:
        %a{rel: "xhv:alternate", href: "earl.ttl"}
          Turtle
        and
        %a{rel: "xhv:alternate", href: "earl.jsonld"}
          JSON-LD
    %section.introductory#sodt
      %h2#h-sotd{resource: "#h-sotd"}
        %span{property: "xhv:role", resource: "xhv:heading"}
          Status of This Document
      %p
        This document is merely a
        %abbr{title: "World Wide Web Consortium"}<>="W3C"
        ="-internal  document."
        It has no official standing of any kind and does not represent consensus of the
        %abbr{title: "World Wide Web Consortium"}="W3C"
        Membership.
      %p
        This report describes the state of implementation conformance at the time of publication.
    %section#toc
      %h2.introductory#h-toc{resource: "#h-toc"}
        %span{property: "xhv:role", resource: "xhv:heading"}
          Table of Contents
      %ul.toc#respecContents{role: "directory"}
        %li.tocline
          %a.tocxref{href: "#instructions-for-submitting-implementation-reports"}
            %span.secno="1."
            Instructions for submitting implementation reports
        %li.tocline
          %a.tocxref{href: "#test-manifests"}
            %span.secno="2."
            Test Manifests
          %ul.toc
            - tests['entries'].sort_by {|m| m['title'].to_s.downcase}.each_with_index do |manifest, ndx|
              %li.tocline
                %span.secno="2.#{ndx+1}"
                %a.tocxref{href: "##{manifest['rdfs:comment'].gsub(' ', '-')}"}
                  ~ manifest['rdfs:comment']
        %li.tocline
          %a.tocxref{href: "#test-subjects"}
            %span.secno="A."
            Test Subjects
          %ul.toc
            - subjects.each_with_index do |subject, ndx|
              %li.tocline
                %span.secno="A.#{ndx+1}"
                %a.tocxref{href: "#" + subject_refs[subject['@id']]}= subject['name']
        %li.tocline
          %a.tocxref{href: "#individual-test-results"}
            %span.secno="B."
            Individual Test Results
        %li.tocline
          %a.tocxref{href: "#report-generation-software"}
            %span.secno="C."
            Report Generation Software

    %section#instructions-for-submitting-implementation-reports
      :markdown
        ## Instructions for submitting implementation reports

          Tests should be run using the test manifests defined in the 
          [Test Manifests](#test-manifests) Section.

          The assumed base URI for the tests is `<http://example/base/>` if needed.

          Reports should be submitted in Turtle format to [public-shex@w3.org](mailto:public-rdf-comments@w3.org)
          and include an `earl:Assertion`
          for each test, referencing the test resource from the associated manifest
          and the test subject being reported upon. An example test entry is be the following:

              [ a earl:Assertion;
                earl:assertedBy <http://greggkellogg.net/foaf#me>;
                earl:subject <http://rubygems.org/gems/shex>;
                earl:test <https://raw.githubusercontent.com/shexSpec/shexTest/master/schemas/manifest#0>;
                earl:result [
                  a earl:TestResult;
                  earl:outcome earl:passed;
                  dc:date "2016-12-26T10:18:04-08:00"^^xsd:dateTime];
                earl:mode earl:automatic ] .

          The Test Subject should be defined as a `doap:Project`, including the name,
          homepage and developer(s) of the software (see [DOAP](https://github.com/edumbill/doap/wiki)). Optionally, including the
          project description and programming language. An example test subject description is the following:

              <> foaf:primaryTopic <http://rubygems.org/gems/shex> ;
                dc:issued "2016-12-26T10:18:04-08:00"^^xsd:dateTime ;
                foaf:maker <http://greggkellogg.net/foaf#me> .

              <http://rubygems.org/gems/shex> a doap:Project, earl:TestSubject, earl:Software ;
                doap:name          "ShEx" ;
                doap:homepage      <http://ruby-rdf.github.com/shex> ;
                doap:license       <http://creativecommons.org/licenses/publicdomain/> ;
                doap:shortdesc     "ShEx is a Shape Expression engine for Ruby."@en ;
                doap:description   "ShEx is an Shape Expression engine for the RDF.rb library suite."@en ;
                doap:created       "2016-12-09"^^xsd:date ;
                doap:programming-language "Ruby" ;
                doap:implements    <https://shexspec.github.io/spec/> ;
                doap:category      <http://dbpedia.org/resource/Resource_Description_Framework>,
                                   <http://dbpedia.org/resource/Ruby_(programming_language)> ;
                doap:download-page <http://rubygems.org/gems/shex> ;
                doap:mailing-list  <http://lists.w3.org/Archives/Public/public-rdf-ruby/> ;
                doap:bug-database  <http://github.com/ruby-rdf/shex/issues> ;
                doap:blog          <http://greggkellogg.net/> ;
                doap:developer     <http://greggkellogg.net/foaf#me> ;
                doap:maintainer    <http://greggkellogg.net/foaf#me> ;
                doap:documenter    <http://greggkellogg.net/foaf#me> ;
                foaf:maker         <http://greggkellogg.net/foaf#me> ;
                dc:title           "ShEx" ;
                dc:description     "ShEx is an Shape Expression engine for the RDF.rb library suite."@en ;
                dc:date            "2016-12-09"^^xsd:date ;
                dc:creator         <http://greggkellogg.net/foaf#me> ;
                dc:isPartOf        <http://rubygems.org/gems/rdf> .

          The software developer, either an organization or one or more individuals SHOULD be
          referenced from `doap:developer` using [FOAF](http://xmlns.com/foaf/spec). For example:

              <http://greggkellogg.net/foaf#me> a foaf:Person, earl:Assertor;
                foaf:name "Gregg Kellogg";
                foaf:title "Implementor";
                foaf:homepage <http://greggkellogg.net/> .

          See [ShEx Test Suite](https://github.com/shexSpec/shexTest/blob/master/README.md)
          for more information.
    %section#test-manifests
      %h2
        %span.secno="2."
        Test Manifests
      - tests['entries'].sort_by {|m| m['title'].to_s.downcase}.each_with_index do |manifest, ndx2|
        - test_cases = manifest['entries']
        %section{id: manifest['rdfs:comment'].gsub(' ', '-'), typeof: manifest['@type'].join(" "), resource: manifest['@id']}
          %h2{property: "rdfs:comment mf:name"}
            %span.secno="2.#{ndx2+1}"
            = manifest['rdfs:comment']
          - Array(manifest['description']).each do |desc|
            %p{property: "rdfs:comment"}<
              ~ CGI.escapeHTML desc.to_s
          %table.report
            - skip_subject = {}
            - passed_tests = []
            %tr
              %th
                Test
              - subjects.each_with_index do |subject, index|
                -# If subject is untested for every test in this manifest, skip it
                - skip_subject[subject['@id']] = manifest['entries'].all? {|t| t['assertions'][index]['result']['outcome'] == 'earl:untested'}
                - unless skip_subject[subject['@id']]
                  %th
                    %a{href: '#' + subject_refs[subject['@id']]}<=subject['name']
            - test_cases.each do |test|
              - require 'byebug'; byebug if test.is_a?(String)
              - test['title'] ||= test['rdfs:label']
              - test['title'] = Array(test['title']).first
              %tr{rel: "mf:entries", typeof: test['@type'].join(" "), resource: test['@id'], inlist: true}
                %td
                  = "Test #{test['@id'].split("#").last}: #{CGI.escapeHTML test['title'].to_s}"
                - test['assertions'].each_with_index do |assertion, ndx|
                  - next if skip_subject[assertion['subject']]
                  - pass_fail = assertion['result']['outcome'].split(':').last.upcase.sub(/(PASS|FAIL)ED$/, '\1')
                  - passed_tests[ndx] = (passed_tests[ndx] || 0) + (pass_fail == 'PASS' ? 1 : 0)
                  %td{class: pass_fail, property: "earl:assertions", typeof: assertion['@type']}
                    - if assertion['assertedBy']
                      %link{property: "earl:assertedBy", href: assertion['assertedBy']}
                    %link{property: "earl:test", href: assertion['test']}
                    %link{property: "earl:subject", href: assertion['subject']}
                    - if assertion['mode']
                      %link{property: 'earl:mode', href: assertion['mode']}
                    %span{property: "earl:result", typeof: assertion['result']['@type']}
                      %span{property: 'earl:outcome', resource: assertion['result']['outcome']}
                        = pass_fail
            %tr.summary
              %td
                = "Percentage passed out of #{manifest['entries'].length} Tests"
              - passed_tests.compact.each do |r|
                - pct = (r * 100.0) / manifest['entries'].length
                %td{class: (pct == 100.0 ? 'passed-all' : (pct >= 95.0 ? 'passed-most' : 'passed-some'))}
                  = "#{'%.1f' % pct}%"
            %tr.summary
              %td
                = "Percentage passed out of #{manifest['entries'].length} Tests"
              - passed_tests.compact.each do |r|
                - pct = (r * 100.0) / manifest['entries'].length
                %td{class: (pct == 100.0 ? 'passed-all' : (pct >= 95.0 ? 'passed-most' : 'passed-some'))}
                  = "#{'%.1f' % pct}%"
    %section.appendix#test-subjects
      %h2
        %span.secno="A."
        Test Subjects
      %p
        This report was tested using the following test subjects:
      %dl
        - subjects.each_with_index do |subject, index|
          %dt{id: subject_refs[subject['@id']]}
            %span.secno="A.#{index+1}"
            %a{href: subject['@id']}
              %span{about: subject['@id'], property: "doap:name"}<= subject['name']
          %dd{property: "earl:testSubjects", resource: subject['@id'], typeof: Array(subject['@type']).join(" ")}
            %dl
              - if subject['doapDesc']
                %dt= "Description"
                %dd{property: "doap:description", lang: 'en'}<
                  ~ CGI.escapeHTML subject['doapDesc'].to_s
              - if subject['language']
                %dt= "Programming Language"
                %dd{property: "doap:programming-language"}<
                  ~ CGI.escapeHTML subject['language'].to_s
              - if subject['homepage']
                %dt= "Home Page"
                %dd{property: "doap:homepage"}
                  %a{href: subject['homepage']}
                    ~ CGI.escapeHTML subject['homepage'].to_s
              - if subject['developer']
                %dt= "Developer"
                %dd{rel: "doap:developer"}
                  - subject['developer'].each do |dev|
                    %div{resource: dev['@id'], typeof: Array(dev['@type']).join(" ")}
                      - if dev.has_key?('@id')
                        %a{href: dev['@id']}
                          %span{property: "foaf:name"}<
                            ~ CGI.escapeHTML dev['foaf:name'].to_s
                      - else
                        %span{property: "foaf:name"}<
                          ~ CGI.escapeHTML dev['foaf:name'].to_s
                      - if dev['foaf:homepage']
                        %a{property: "foaf:homepage", href: dev['foaf:homepage']}
                          ~ CGI.escapeHTML dev['foaf:homepage'].to_s
              %dt
                Test Suite Compliance
              %dd
                %table.report
                  %tbody
                    - tests['entries'].sort_by {|m| m['title'].to_s.downcase}.each do |manifest|
                      - passed = manifest['entries'].select {|t| t['assertions'][index]['result']['outcome'] == 'earl:passed' }.length
                      - total = manifest['entries'].length
                      - pct = (passed * 100.0) / total
                      - cls = (pct == 100.0 ? 'passed-all' : (pct >= 85.0) ? 'passed-most' : (pct == 0.0 ? 'passed-none' : 'passed-some'))
                      %tr
                        %td
                          %a{href: "##{manifest['rdfs:comment']}"}
                            ~ manifest['rdfs:comment']
                        %td{class: cls}
                          = pct == 0.0 ? "Untested" : "#{passed}/#{total} (#{'%.1f' % pct}%)"
    - unless tests['assertions'].empty?
      %section.appendix#individual-test-results{rel: "xhv:related earl:assertions"}
        %h2
          %span.secno="B."
          Individual Test Results
        %p
          Individual test results used to construct this report are available here:
        %ul
          - tests['assertions'].each do |file|
            %li
              %a.source{href: file}<= file
    %section.appendix#report-generation-software{property: "earl:generatedBy", resource: tests['generatedBy']['@id'], typeof: tests['generatedBy']['@type']}
      %h2
        %span.secno="C."
        Report Generation Software
      - doap = tests['generatedBy']
      - rel = doap['release']
      %p
        This report generated by
        %span{property: "doap:name"}<
          %a{href: tests['generatedBy']['@id']}<
            = doap['name']
        %meta{property: "doap:shortdesc", content: doap['shortdesc'], lang: 'en'}
        %meta{property: "doap:description", content: doap['doapDesc'], lang: 'en'}
        version
        %span{property: "doap:release", resource: rel['@id'], typeof: 'doap:Version'}
          %span{property: "doap:revision"}<=rel['revision']
          %meta{property: "doap:name", content: rel['name']}
          %meta{property: "doap:created", content: rel['created'], datatype: "xsd:date"}
        an
        %a{property: "doap:license", href: doap['license']}<="Unlicensed"
        %span{property: "doap:programming-language"}<="Ruby"
        application. More information is available at
        %a{property: "doap:homepage", href: doap['homepage']}<=doap['homepage']
        = "."
